{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Jun  4 2021, 14:48:32) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.2, V11.2.152\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.10.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.1+cu113\nOpenCV: 4.5.4\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/balloon/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/train.json',\n        img_prefix='data/balloon/train',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/val.json',\n        img_prefix='data/balloon/val',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/val.json',\n        img_prefix='data/balloon/val',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=10)\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoint/mask_rcnn_r50_fpn_2x_coco_bbox_mAP-0.392__segm_mAP-0.354_20200505_003907-3e542a40.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/balloon'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1796114243, "exp_name": "balloon.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 5e-05, "memory": 3730, "data_time": 0.26955, "loss_rpn_cls": 0.05829, "loss_rpn_bbox": 0.01697, "loss_cls": 0.61552, "acc": 76.2207, "loss_bbox": 0.40204, "loss_mask": 5.93273, "loss": 7.02554, "time": 0.69474}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.0001, "memory": 3730, "data_time": 0.02529, "loss_rpn_cls": 0.03857, "loss_rpn_bbox": 0.01025, "loss_cls": 0.47937, "acc": 93.1543, "loss_bbox": 0.23202, "loss_mask": 0.86366, "loss": 1.62387, "time": 0.41961}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.00015, "memory": 3733, "data_time": 0.0409, "loss_rpn_cls": 0.08986, "loss_rpn_bbox": 0.02188, "loss_cls": 0.38188, "acc": 88.7793, "loss_bbox": 0.40159, "loss_mask": 0.41674, "loss": 1.31194, "time": 0.43938}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.0673, "bbox_mAP_50": 0.0952, "bbox_mAP_75": 0.0815, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0266, "bbox_mAP_l": 0.1043, "bbox_mAP_copypaste": "0.0673 0.0952 0.0815 0.0000 0.0266 0.1043", "segm_mAP": 0.082, "segm_mAP_50": 0.1049, "segm_mAP_75": 0.0929, "segm_mAP_s": 0.001, "segm_mAP_m": 0.024, "segm_mAP_l": 0.1642, "segm_mAP_copypaste": "0.0820 0.1049 0.0929 0.0010 0.0240 0.1642"}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.0002, "memory": 3786, "data_time": 0.2679, "loss_rpn_cls": 0.03598, "loss_rpn_bbox": 0.01034, "loss_cls": 0.28359, "acc": 90.53711, "loss_bbox": 0.34988, "loss_mask": 0.29153, "loss": 0.97133, "time": 0.6727}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.00025, "memory": 3786, "data_time": 0.03409, "loss_rpn_cls": 0.02238, "loss_rpn_bbox": 0.01673, "loss_cls": 0.26422, "acc": 88.61328, "loss_bbox": 0.41392, "loss_mask": 0.1627, "loss": 0.87994, "time": 0.44358}
{"mode": "train", "epoch": 2, "iter": 30, "lr": 0.0003, "memory": 3786, "data_time": 0.02304, "loss_rpn_cls": 0.03061, "loss_rpn_bbox": 0.01238, "loss_cls": 0.23038, "acc": 89.04297, "loss_bbox": 0.40551, "loss_mask": 0.1733, "loss": 0.85218, "time": 0.4444}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00031, "bbox_mAP": 0.5452, "bbox_mAP_50": 0.7317, "bbox_mAP_75": 0.7168, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4162, "bbox_mAP_l": 0.6286, "bbox_mAP_copypaste": "0.5452 0.7317 0.7168 0.0000 0.4162 0.6286", "segm_mAP": 0.6694, "segm_mAP_50": 0.7309, "segm_mAP_75": 0.7244, "segm_mAP_s": 0.0032, "segm_mAP_m": 0.4492, "segm_mAP_l": 0.7716, "segm_mAP_copypaste": "0.6694 0.7309 0.7244 0.0032 0.4492 0.7716"}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.00036, "memory": 3889, "data_time": 0.26073, "loss_rpn_cls": 0.02361, "loss_rpn_bbox": 0.01004, "loss_cls": 0.1805, "acc": 90.88867, "loss_bbox": 0.32864, "loss_mask": 0.09071, "loss": 0.63349, "time": 0.65921}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.00041, "memory": 3889, "data_time": 0.03823, "loss_rpn_cls": 0.01256, "loss_rpn_bbox": 0.00976, "loss_cls": 0.19755, "acc": 88.78906, "loss_bbox": 0.42503, "loss_mask": 0.1047, "loss": 0.74959, "time": 0.44985}
{"mode": "train", "epoch": 3, "iter": 30, "lr": 0.00046, "memory": 3889, "data_time": 0.03476, "loss_rpn_cls": 0.01563, "loss_rpn_bbox": 0.01533, "loss_cls": 0.17973, "acc": 91.83594, "loss_bbox": 0.37275, "loss_mask": 0.11943, "loss": 0.70287, "time": 0.45465}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00046, "bbox_mAP": 0.5909, "bbox_mAP_50": 0.7892, "bbox_mAP_75": 0.7788, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.5171, "bbox_mAP_l": 0.65, "bbox_mAP_copypaste": "0.5909 0.7892 0.7788 0.1010 0.5171 0.6500", "segm_mAP": 0.7191, "segm_mAP_50": 0.7916, "segm_mAP_75": 0.779, "segm_mAP_s": 0.0462, "segm_mAP_m": 0.5759, "segm_mAP_l": 0.797, "segm_mAP_copypaste": "0.7191 0.7916 0.7790 0.0462 0.5759 0.7970"}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.00051, "memory": 3889, "data_time": 0.28404, "loss_rpn_cls": 0.01295, "loss_rpn_bbox": 0.01228, "loss_cls": 0.15235, "acc": 95.40039, "loss_bbox": 0.36671, "loss_mask": 0.08746, "loss": 0.63176, "time": 0.70256}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.00056, "memory": 3889, "data_time": 0.03281, "loss_rpn_cls": 0.01477, "loss_rpn_bbox": 0.00966, "loss_cls": 0.10246, "acc": 96.60156, "loss_bbox": 0.2555, "loss_mask": 0.08175, "loss": 0.46414, "time": 0.44405}
{"mode": "train", "epoch": 4, "iter": 30, "lr": 0.00061, "memory": 3889, "data_time": 0.02742, "loss_rpn_cls": 0.01323, "loss_rpn_bbox": 0.00923, "loss_cls": 0.10036, "acc": 96.78711, "loss_bbox": 0.23066, "loss_mask": 0.09076, "loss": 0.44424, "time": 0.44112}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00062, "bbox_mAP": 0.7079, "bbox_mAP_50": 0.8512, "bbox_mAP_75": 0.8269, "bbox_mAP_s": 0.1076, "bbox_mAP_m": 0.638, "bbox_mAP_l": 0.7622, "bbox_mAP_copypaste": "0.7079 0.8512 0.8269 0.1076 0.6380 0.7622", "segm_mAP": 0.7728, "segm_mAP_50": 0.8437, "segm_mAP_75": 0.8414, "segm_mAP_s": 0.0751, "segm_mAP_m": 0.6562, "segm_mAP_l": 0.8389, "segm_mAP_copypaste": "0.7728 0.8437 0.8414 0.0751 0.6562 0.8389"}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.00067, "memory": 3889, "data_time": 0.26933, "loss_rpn_cls": 0.01502, "loss_rpn_bbox": 0.01955, "loss_cls": 0.1196, "acc": 95.75195, "loss_bbox": 0.19873, "loss_mask": 0.11297, "loss": 0.46586, "time": 0.69646}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.00072, "memory": 3889, "data_time": 0.02623, "loss_rpn_cls": 0.01336, "loss_rpn_bbox": 0.00759, "loss_cls": 0.06321, "acc": 97.8418, "loss_bbox": 0.0994, "loss_mask": 0.10662, "loss": 0.29017, "time": 0.42737}
{"mode": "train", "epoch": 5, "iter": 30, "lr": 0.00077, "memory": 3889, "data_time": 0.02475, "loss_rpn_cls": 0.00667, "loss_rpn_bbox": 0.00731, "loss_cls": 0.06899, "acc": 97.4707, "loss_bbox": 0.11069, "loss_mask": 0.09508, "loss": 0.28875, "time": 0.43498}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00077, "bbox_mAP": 0.7252, "bbox_mAP_50": 0.8917, "bbox_mAP_75": 0.8609, "bbox_mAP_s": 0.1466, "bbox_mAP_m": 0.6179, "bbox_mAP_l": 0.7776, "bbox_mAP_copypaste": "0.7252 0.8917 0.8609 0.1466 0.6179 0.7776", "segm_mAP": 0.7811, "segm_mAP_50": 0.8851, "segm_mAP_75": 0.8744, "segm_mAP_s": 0.0838, "segm_mAP_m": 0.6436, "segm_mAP_l": 0.837, "segm_mAP_copypaste": "0.7811 0.8851 0.8744 0.0838 0.6436 0.8370"}
{"mode": "train", "epoch": 6, "iter": 10, "lr": 0.00082, "memory": 3889, "data_time": 0.26958, "loss_rpn_cls": 0.0095, "loss_rpn_bbox": 0.01486, "loss_cls": 0.09715, "acc": 96.37695, "loss_bbox": 0.14505, "loss_mask": 0.11779, "loss": 0.38434, "time": 0.68896}
{"mode": "train", "epoch": 6, "iter": 20, "lr": 0.00087, "memory": 3889, "data_time": 0.03066, "loss_rpn_cls": 0.00627, "loss_rpn_bbox": 0.00738, "loss_cls": 0.06778, "acc": 97.43164, "loss_bbox": 0.07079, "loss_mask": 0.06362, "loss": 0.21585, "time": 0.42989}
{"mode": "train", "epoch": 6, "iter": 30, "lr": 0.00092, "memory": 3889, "data_time": 0.02673, "loss_rpn_cls": 0.0065, "loss_rpn_bbox": 0.0068, "loss_cls": 0.05491, "acc": 97.97852, "loss_bbox": 0.07681, "loss_mask": 0.08127, "loss": 0.22629, "time": 0.43258}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00093, "bbox_mAP": 0.7308, "bbox_mAP_50": 0.8855, "bbox_mAP_75": 0.8605, "bbox_mAP_s": 0.1737, "bbox_mAP_m": 0.5942, "bbox_mAP_l": 0.7952, "bbox_mAP_copypaste": "0.7308 0.8855 0.8605 0.1737 0.5942 0.7952", "segm_mAP": 0.7891, "segm_mAP_50": 0.8855, "segm_mAP_75": 0.868, "segm_mAP_s": 0.0852, "segm_mAP_m": 0.6426, "segm_mAP_l": 0.8526, "segm_mAP_copypaste": "0.7891 0.8855 0.8680 0.0852 0.6426 0.8526"}
{"mode": "train", "epoch": 7, "iter": 10, "lr": 0.00098, "memory": 3889, "data_time": 0.26128, "loss_rpn_cls": 0.00422, "loss_rpn_bbox": 0.01033, "loss_cls": 0.06708, "acc": 97.28516, "loss_bbox": 0.10256, "loss_mask": 0.09274, "loss": 0.27692, "time": 0.69052}
{"mode": "train", "epoch": 7, "iter": 20, "lr": 0.00103, "memory": 3889, "data_time": 0.03911, "loss_rpn_cls": 0.00571, "loss_rpn_bbox": 0.01114, "loss_cls": 0.06723, "acc": 97.5293, "loss_bbox": 0.09177, "loss_mask": 0.07451, "loss": 0.25037, "time": 0.44548}
{"mode": "train", "epoch": 7, "iter": 30, "lr": 0.00108, "memory": 3889, "data_time": 0.02604, "loss_rpn_cls": 0.00545, "loss_rpn_bbox": 0.0056, "loss_cls": 0.05328, "acc": 98.06641, "loss_bbox": 0.0671, "loss_mask": 0.06787, "loss": 0.1993, "time": 0.4348}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00108, "bbox_mAP": 0.7265, "bbox_mAP_50": 0.883, "bbox_mAP_75": 0.883, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.6547, "bbox_mAP_l": 0.7782, "bbox_mAP_copypaste": "0.7265 0.8830 0.8830 0.1515 0.6547 0.7782", "segm_mAP": 0.7861, "segm_mAP_50": 0.873, "segm_mAP_75": 0.873, "segm_mAP_s": 0.0577, "segm_mAP_m": 0.6332, "segm_mAP_l": 0.8556, "segm_mAP_copypaste": "0.7861 0.8730 0.8730 0.0577 0.6332 0.8556"}
{"mode": "train", "epoch": 8, "iter": 10, "lr": 0.00113, "memory": 3889, "data_time": 0.26338, "loss_rpn_cls": 0.00413, "loss_rpn_bbox": 0.00534, "loss_cls": 0.04534, "acc": 98.26172, "loss_bbox": 0.05647, "loss_mask": 0.05961, "loss": 0.17089, "time": 0.6691}
{"mode": "train", "epoch": 8, "iter": 20, "lr": 0.00118, "memory": 3889, "data_time": 0.02822, "loss_rpn_cls": 0.0027, "loss_rpn_bbox": 0.00501, "loss_cls": 0.04936, "acc": 97.99805, "loss_bbox": 0.06835, "loss_mask": 0.07477, "loss": 0.20018, "time": 0.43066}
{"mode": "train", "epoch": 8, "iter": 30, "lr": 0.00123, "memory": 3889, "data_time": 0.03795, "loss_rpn_cls": 0.00683, "loss_rpn_bbox": 0.01439, "loss_cls": 0.07868, "acc": 96.91406, "loss_bbox": 0.10688, "loss_mask": 0.10238, "loss": 0.30918, "time": 0.46309}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00124, "bbox_mAP": 0.7461, "bbox_mAP_50": 0.8902, "bbox_mAP_75": 0.8902, "bbox_mAP_s": 0.202, "bbox_mAP_m": 0.614, "bbox_mAP_l": 0.8128, "bbox_mAP_copypaste": "0.7461 0.8902 0.8902 0.2020 0.6140 0.8128", "segm_mAP": 0.7884, "segm_mAP_50": 0.8743, "segm_mAP_75": 0.8743, "segm_mAP_s": 0.0568, "segm_mAP_m": 0.604, "segm_mAP_l": 0.8571, "segm_mAP_copypaste": "0.7884 0.8743 0.8743 0.0568 0.6040 0.8571"}
{"mode": "train", "epoch": 9, "iter": 10, "lr": 0.00129, "memory": 3889, "data_time": 0.26572, "loss_rpn_cls": 0.00342, "loss_rpn_bbox": 0.00889, "loss_cls": 0.05866, "acc": 97.80273, "loss_bbox": 0.08796, "loss_mask": 0.0766, "loss": 0.23553, "time": 0.68165}
{"mode": "train", "epoch": 9, "iter": 20, "lr": 0.00134, "memory": 3889, "data_time": 0.02735, "loss_rpn_cls": 0.00254, "loss_rpn_bbox": 0.00693, "loss_cls": 0.04289, "acc": 98.28125, "loss_bbox": 0.06979, "loss_mask": 0.0594, "loss": 0.18156, "time": 0.44362}
{"mode": "train", "epoch": 9, "iter": 30, "lr": 0.00139, "memory": 3889, "data_time": 0.03036, "loss_rpn_cls": 0.00426, "loss_rpn_bbox": 0.00943, "loss_cls": 0.05016, "acc": 98.08594, "loss_bbox": 0.06994, "loss_mask": 0.07209, "loss": 0.20586, "time": 0.45278}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00139, "bbox_mAP": 0.7374, "bbox_mAP_50": 0.8901, "bbox_mAP_75": 0.8901, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.6073, "bbox_mAP_l": 0.7943, "bbox_mAP_copypaste": "0.7374 0.8901 0.8901 0.4040 0.6073 0.7943", "segm_mAP": 0.7919, "segm_mAP_50": 0.8755, "segm_mAP_75": 0.8755, "segm_mAP_s": 0.404, "segm_mAP_m": 0.6249, "segm_mAP_l": 0.8557, "segm_mAP_copypaste": "0.7919 0.8755 0.8755 0.4040 0.6249 0.8557"}
{"mode": "train", "epoch": 10, "iter": 10, "lr": 0.00144, "memory": 3889, "data_time": 0.26182, "loss_rpn_cls": 0.0014, "loss_rpn_bbox": 0.008, "loss_cls": 0.04941, "acc": 98.1543, "loss_bbox": 0.06933, "loss_mask": 0.06527, "loss": 0.19341, "time": 0.67144}
{"mode": "train", "epoch": 10, "iter": 20, "lr": 0.00149, "memory": 3889, "data_time": 0.02546, "loss_rpn_cls": 0.00178, "loss_rpn_bbox": 0.00357, "loss_cls": 0.032, "acc": 98.76953, "loss_bbox": 0.04898, "loss_mask": 0.06231, "loss": 0.14864, "time": 0.42406}
{"mode": "train", "epoch": 10, "iter": 30, "lr": 0.00154, "memory": 3889, "data_time": 0.0345, "loss_rpn_cls": 0.0048, "loss_rpn_bbox": 0.01037, "loss_cls": 0.04982, "acc": 98.11523, "loss_bbox": 0.07637, "loss_mask": 0.07857, "loss": 0.21992, "time": 0.43102}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00155, "bbox_mAP": 0.7773, "bbox_mAP_50": 0.8919, "bbox_mAP_75": 0.8919, "bbox_mAP_s": 0.4545, "bbox_mAP_m": 0.6558, "bbox_mAP_l": 0.8424, "bbox_mAP_copypaste": "0.7773 0.8919 0.8919 0.4545 0.6558 0.8424", "segm_mAP": 0.7957, "segm_mAP_50": 0.8919, "segm_mAP_75": 0.8772, "segm_mAP_s": 0.404, "segm_mAP_m": 0.642, "segm_mAP_l": 0.8613, "segm_mAP_copypaste": "0.7957 0.8919 0.8772 0.4040 0.6420 0.8613"}
