{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Jun  4 2021, 14:48:32) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.2, V11.2.152\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.10.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.1+cu113\nOpenCV: 4.5.4\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d'),\n        groups=64,\n        base_width=4),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=20,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'VOCDataset'\ndata_root = 'data/VOCdevkit/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1000, 600),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='RepeatDataset',\n        times=3,\n        dataset=dict(\n            type='VOCDataset',\n            ann_file=['data/VOCdevkit/VOC2012/ImageSets/Main/train.txt'],\n            img_prefix=['data/VOCdevkit/VOC2012/'],\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ])),\n    val=dict(\n        type='VOCDataset',\n        ann_file='data/VOCdevkit/VOC2012/ImageSets/Main/val.txt',\n        img_prefix='data/VOCdevkit/VOC2012/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='VOCDataset',\n        ann_file='data/VOCdevkit/VOC2012/ImageSets/Main/val.txt',\n        img_prefix='data/VOCdevkit/VOC2012/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='mAP')\noptimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=1)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoint/faster_rcnn_x101_64x4d_fpn_1x_coco_20200204-833ee192.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/faster_rcnn_x101_64x4d_fpn_1x_coco'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1538447871, "exp_name": "faster_rcnn_x101_64x4d_fpn_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0005, "memory": 6220, "data_time": 0.02763, "loss_rpn_cls": 0.01091, "loss_rpn_bbox": 0.01043, "loss_cls": 1.02385, "acc": 81.64844, "loss_bbox": 0.28962, "loss": 1.33481, "time": 0.29189}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.001, "memory": 6220, "data_time": 0.00422, "loss_rpn_cls": 0.01041, "loss_rpn_bbox": 0.01057, "loss_cls": 0.31843, "acc": 92.1582, "loss_bbox": 0.30079, "loss": 0.6402, "time": 0.2576}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0015, "memory": 6220, "data_time": 0.00454, "loss_rpn_cls": 0.00862, "loss_rpn_bbox": 0.01, "loss_cls": 0.22303, "acc": 94.45312, "loss_bbox": 0.24173, "loss": 0.48337, "time": 0.26079}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.002, "memory": 6220, "data_time": 0.00407, "loss_rpn_cls": 0.01223, "loss_rpn_bbox": 0.0117, "loss_cls": 0.15079, "acc": 95.78516, "loss_bbox": 0.19092, "loss": 0.36563, "time": 0.25915}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0025, "memory": 6220, "data_time": 0.00412, "loss_rpn_cls": 0.0117, "loss_rpn_bbox": 0.0126, "loss_cls": 0.14045, "acc": 95.58008, "loss_bbox": 0.20989, "loss": 0.37464, "time": 0.25818}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0025, "memory": 6220, "data_time": 0.00408, "loss_rpn_cls": 0.01436, "loss_rpn_bbox": 0.01184, "loss_cls": 0.11453, "acc": 96.40918, "loss_bbox": 0.15879, "loss": 0.29952, "time": 0.25653}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0025, "memory": 6220, "data_time": 0.00425, "loss_rpn_cls": 0.01424, "loss_rpn_bbox": 0.0117, "loss_cls": 0.12176, "acc": 96.26953, "loss_bbox": 0.16389, "loss": 0.31158, "time": 0.26015}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0025, "memory": 6220, "data_time": 0.00416, "loss_rpn_cls": 0.01708, "loss_rpn_bbox": 0.01272, "loss_cls": 0.12068, "acc": 96.22266, "loss_bbox": 0.15623, "loss": 0.30672, "time": 0.25801}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0025, "memory": 6220, "data_time": 0.00411, "loss_rpn_cls": 0.00827, "loss_rpn_bbox": 0.00908, "loss_cls": 0.1043, "acc": 96.57031, "loss_bbox": 0.13276, "loss": 0.25442, "time": 0.26168}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.0025, "memory": 6220, "data_time": 0.00411, "loss_rpn_cls": 0.01467, "loss_rpn_bbox": 0.01247, "loss_cls": 0.12335, "acc": 96.10938, "loss_bbox": 0.15023, "loss": 0.30072, "time": 0.25852}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.0025, "memory": 6220, "data_time": 0.00417, "loss_rpn_cls": 0.01093, "loss_rpn_bbox": 0.01249, "loss_cls": 0.10926, "acc": 96.38965, "loss_bbox": 0.1544, "loss": 0.28708, "time": 0.25995}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.0025, "memory": 6220, "data_time": 0.00441, "loss_rpn_cls": 0.0092, "loss_rpn_bbox": 0.01095, "loss_cls": 0.10042, "acc": 96.69531, "loss_bbox": 0.12557, "loss": 0.24614, "time": 0.26065}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.0025, "memory": 6220, "data_time": 0.00482, "loss_rpn_cls": 0.01094, "loss_rpn_bbox": 0.01137, "loss_cls": 0.10551, "acc": 96.59082, "loss_bbox": 0.1397, "loss": 0.26752, "time": 0.26275}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.0025, "memory": 6220, "data_time": 0.00434, "loss_rpn_cls": 0.01303, "loss_rpn_bbox": 0.01245, "loss_cls": 0.13463, "acc": 95.69824, "loss_bbox": 0.16202, "loss": 0.32213, "time": 0.26148}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.0025, "memory": 6220, "data_time": 0.00439, "loss_rpn_cls": 0.00918, "loss_rpn_bbox": 0.00893, "loss_cls": 0.09713, "acc": 96.81445, "loss_bbox": 0.13468, "loss": 0.24991, "time": 0.26624}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.0025, "memory": 6220, "data_time": 0.00403, "loss_rpn_cls": 0.00958, "loss_rpn_bbox": 0.01067, "loss_cls": 0.11282, "acc": 96.23926, "loss_bbox": 0.14321, "loss": 0.27627, "time": 0.25556}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.0025, "memory": 6220, "data_time": 0.00409, "loss_rpn_cls": 0.00934, "loss_rpn_bbox": 0.01048, "loss_cls": 0.09373, "acc": 96.86719, "loss_bbox": 0.12441, "loss": 0.23796, "time": 0.25974}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.0025, "memory": 6220, "data_time": 0.00401, "loss_rpn_cls": 0.01195, "loss_rpn_bbox": 0.01109, "loss_cls": 0.11195, "acc": 96.4502, "loss_bbox": 0.13709, "loss": 0.27208, "time": 0.25768}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.0025, "memory": 6220, "data_time": 0.00402, "loss_rpn_cls": 0.00922, "loss_rpn_bbox": 0.00999, "loss_cls": 0.10768, "acc": 96.60547, "loss_bbox": 0.13041, "loss": 0.2573, "time": 0.25655}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.0025, "memory": 6220, "data_time": 0.0042, "loss_rpn_cls": 0.00845, "loss_rpn_bbox": 0.01058, "loss_cls": 0.11313, "acc": 96.32227, "loss_bbox": 0.14127, "loss": 0.27342, "time": 0.25801}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.0025, "memory": 6220, "data_time": 0.00422, "loss_rpn_cls": 0.00838, "loss_rpn_bbox": 0.01221, "loss_cls": 0.10691, "acc": 96.33301, "loss_bbox": 0.137, "loss": 0.26451, "time": 0.25969}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.0025, "memory": 6220, "data_time": 0.00479, "loss_rpn_cls": 0.00654, "loss_rpn_bbox": 0.01083, "loss_cls": 0.09791, "acc": 96.75586, "loss_bbox": 0.12706, "loss": 0.24233, "time": 0.26197}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.0025, "memory": 6220, "data_time": 0.00483, "loss_rpn_cls": 0.00824, "loss_rpn_bbox": 0.0093, "loss_cls": 0.09544, "acc": 96.76562, "loss_bbox": 0.1202, "loss": 0.23318, "time": 0.2673}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.0025, "memory": 6220, "data_time": 0.00587, "loss_rpn_cls": 0.00789, "loss_rpn_bbox": 0.01001, "loss_cls": 0.10787, "acc": 96.46289, "loss_bbox": 0.12341, "loss": 0.24918, "time": 0.26708}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.0025, "memory": 6220, "data_time": 0.00475, "loss_rpn_cls": 0.00847, "loss_rpn_bbox": 0.0116, "loss_cls": 0.10648, "acc": 96.43262, "loss_bbox": 0.14158, "loss": 0.26813, "time": 0.26043}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.0025, "memory": 6220, "data_time": 0.00618, "loss_rpn_cls": 0.00619, "loss_rpn_bbox": 0.01006, "loss_cls": 0.09133, "acc": 96.80762, "loss_bbox": 0.13295, "loss": 0.24053, "time": 0.26535}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.0025, "memory": 6220, "data_time": 0.0046, "loss_rpn_cls": 0.00745, "loss_rpn_bbox": 0.01109, "loss_cls": 0.09321, "acc": 96.75098, "loss_bbox": 0.12278, "loss": 0.23453, "time": 0.26171}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.0025, "memory": 6220, "data_time": 0.00479, "loss_rpn_cls": 0.0076, "loss_rpn_bbox": 0.01032, "loss_cls": 0.10337, "acc": 96.49023, "loss_bbox": 0.13347, "loss": 0.25476, "time": 0.26175}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.0025, "memory": 6220, "data_time": 0.00531, "loss_rpn_cls": 0.01231, "loss_rpn_bbox": 0.01053, "loss_cls": 0.09228, "acc": 96.92188, "loss_bbox": 0.11617, "loss": 0.23129, "time": 0.2664}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.0025, "memory": 6220, "data_time": 0.00497, "loss_rpn_cls": 0.00566, "loss_rpn_bbox": 0.00868, "loss_cls": 0.0759, "acc": 97.46875, "loss_bbox": 0.09523, "loss": 0.18547, "time": 0.26501}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.0025, "memory": 6220, "data_time": 0.00404, "loss_rpn_cls": 0.00866, "loss_rpn_bbox": 0.01138, "loss_cls": 0.09735, "acc": 96.70215, "loss_bbox": 0.12742, "loss": 0.2448, "time": 0.25304}
{"mode": "train", "epoch": 1, "iter": 3200, "lr": 0.0025, "memory": 6220, "data_time": 0.00483, "loss_rpn_cls": 0.00713, "loss_rpn_bbox": 0.01086, "loss_cls": 0.08836, "acc": 96.91211, "loss_bbox": 0.11393, "loss": 0.22028, "time": 0.26391}
{"mode": "train", "epoch": 1, "iter": 3300, "lr": 0.0025, "memory": 6220, "data_time": 0.00504, "loss_rpn_cls": 0.00486, "loss_rpn_bbox": 0.00899, "loss_cls": 0.08888, "acc": 96.98828, "loss_bbox": 0.10497, "loss": 0.2077, "time": 0.26553}
{"mode": "train", "epoch": 1, "iter": 3400, "lr": 0.0025, "memory": 6220, "data_time": 0.00572, "loss_rpn_cls": 0.00735, "loss_rpn_bbox": 0.01103, "loss_cls": 0.08749, "acc": 96.98047, "loss_bbox": 0.12228, "loss": 0.22815, "time": 0.26634}
{"mode": "train", "epoch": 1, "iter": 3500, "lr": 0.0025, "memory": 6220, "data_time": 0.00583, "loss_rpn_cls": 0.00758, "loss_rpn_bbox": 0.01047, "loss_cls": 0.10551, "acc": 96.49316, "loss_bbox": 0.1226, "loss": 0.24616, "time": 0.26646}
{"mode": "train", "epoch": 1, "iter": 3600, "lr": 0.0025, "memory": 6220, "data_time": 0.00594, "loss_rpn_cls": 0.00774, "loss_rpn_bbox": 0.00887, "loss_cls": 0.09378, "acc": 96.7998, "loss_bbox": 0.11606, "loss": 0.22645, "time": 0.26483}
{"mode": "train", "epoch": 1, "iter": 3700, "lr": 0.0025, "memory": 6220, "data_time": 0.00488, "loss_rpn_cls": 0.00928, "loss_rpn_bbox": 0.01163, "loss_cls": 0.08836, "acc": 96.90332, "loss_bbox": 0.11853, "loss": 0.2278, "time": 0.25969}
{"mode": "train", "epoch": 1, "iter": 3800, "lr": 0.0025, "memory": 6220, "data_time": 0.0041, "loss_rpn_cls": 0.00504, "loss_rpn_bbox": 0.00932, "loss_cls": 0.08028, "acc": 97.1875, "loss_bbox": 0.10607, "loss": 0.20072, "time": 0.25374}
{"mode": "train", "epoch": 1, "iter": 3900, "lr": 0.0025, "memory": 6220, "data_time": 0.00413, "loss_rpn_cls": 0.00615, "loss_rpn_bbox": 0.0101, "loss_cls": 0.09387, "acc": 96.69531, "loss_bbox": 0.12497, "loss": 0.23509, "time": 0.25637}
{"mode": "train", "epoch": 1, "iter": 4000, "lr": 0.0025, "memory": 6220, "data_time": 0.00485, "loss_rpn_cls": 0.00751, "loss_rpn_bbox": 0.00954, "loss_cls": 0.09129, "acc": 97.03906, "loss_bbox": 0.11301, "loss": 0.22135, "time": 0.26302}
{"mode": "train", "epoch": 1, "iter": 4100, "lr": 0.0025, "memory": 6220, "data_time": 0.00627, "loss_rpn_cls": 0.00623, "loss_rpn_bbox": 0.00982, "loss_cls": 0.09493, "acc": 96.62402, "loss_bbox": 0.11656, "loss": 0.22754, "time": 0.2662}
{"mode": "train", "epoch": 1, "iter": 4200, "lr": 0.0025, "memory": 6220, "data_time": 0.00481, "loss_rpn_cls": 0.00891, "loss_rpn_bbox": 0.01126, "loss_cls": 0.08791, "acc": 96.9502, "loss_bbox": 0.11799, "loss": 0.22608, "time": 0.2587}
{"mode": "train", "epoch": 1, "iter": 4300, "lr": 0.0025, "memory": 6220, "data_time": 0.00421, "loss_rpn_cls": 0.007, "loss_rpn_bbox": 0.00861, "loss_cls": 0.08371, "acc": 97.05566, "loss_bbox": 0.11284, "loss": 0.21217, "time": 0.25582}
{"mode": "train", "epoch": 1, "iter": 4400, "lr": 0.0025, "memory": 6220, "data_time": 0.00423, "loss_rpn_cls": 0.00678, "loss_rpn_bbox": 0.00881, "loss_cls": 0.07411, "acc": 97.3418, "loss_bbox": 0.10649, "loss": 0.19619, "time": 0.25587}
{"mode": "train", "epoch": 1, "iter": 4500, "lr": 0.0025, "memory": 6220, "data_time": 0.00535, "loss_rpn_cls": 0.00844, "loss_rpn_bbox": 0.01126, "loss_cls": 0.08925, "acc": 96.92578, "loss_bbox": 0.11526, "loss": 0.22421, "time": 0.269}
{"mode": "train", "epoch": 1, "iter": 4600, "lr": 0.0025, "memory": 6220, "data_time": 0.00546, "loss_rpn_cls": 0.00482, "loss_rpn_bbox": 0.01038, "loss_cls": 0.08056, "acc": 97.03809, "loss_bbox": 0.11514, "loss": 0.21089, "time": 0.26706}
{"mode": "train", "epoch": 1, "iter": 4700, "lr": 0.0025, "memory": 6220, "data_time": 0.0042, "loss_rpn_cls": 0.00554, "loss_rpn_bbox": 0.0094, "loss_cls": 0.08897, "acc": 96.94238, "loss_bbox": 0.11686, "loss": 0.22078, "time": 0.25767}
{"mode": "train", "epoch": 1, "iter": 4800, "lr": 0.0025, "memory": 6220, "data_time": 0.00424, "loss_rpn_cls": 0.00803, "loss_rpn_bbox": 0.00891, "loss_cls": 0.07776, "acc": 97.28906, "loss_bbox": 0.10554, "loss": 0.20024, "time": 0.25983}
{"mode": "train", "epoch": 1, "iter": 4900, "lr": 0.0025, "memory": 6220, "data_time": 0.00581, "loss_rpn_cls": 0.00713, "loss_rpn_bbox": 0.01007, "loss_cls": 0.07689, "acc": 97.2998, "loss_bbox": 0.10719, "loss": 0.20127, "time": 0.26504}
{"mode": "train", "epoch": 1, "iter": 5000, "lr": 0.0025, "memory": 6220, "data_time": 0.00521, "loss_rpn_cls": 0.00631, "loss_rpn_bbox": 0.01061, "loss_cls": 0.0922, "acc": 96.8418, "loss_bbox": 0.11898, "loss": 0.2281, "time": 0.26345}
{"mode": "train", "epoch": 1, "iter": 5100, "lr": 0.0025, "memory": 6220, "data_time": 0.0042, "loss_rpn_cls": 0.00906, "loss_rpn_bbox": 0.01109, "loss_cls": 0.09887, "acc": 96.55762, "loss_bbox": 0.12747, "loss": 0.24649, "time": 0.25976}
{"mode": "train", "epoch": 1, "iter": 5200, "lr": 0.0025, "memory": 6220, "data_time": 0.0047, "loss_rpn_cls": 0.00791, "loss_rpn_bbox": 0.01122, "loss_cls": 0.08785, "acc": 96.99121, "loss_bbox": 0.11768, "loss": 0.22466, "time": 0.26336}
{"mode": "train", "epoch": 1, "iter": 5300, "lr": 0.0025, "memory": 6220, "data_time": 0.00437, "loss_rpn_cls": 0.00687, "loss_rpn_bbox": 0.01056, "loss_cls": 0.08984, "acc": 96.88672, "loss_bbox": 0.11831, "loss": 0.22557, "time": 0.25483}
{"mode": "train", "epoch": 1, "iter": 5400, "lr": 0.0025, "memory": 6220, "data_time": 0.0045, "loss_rpn_cls": 0.00571, "loss_rpn_bbox": 0.01027, "loss_cls": 0.09214, "acc": 96.69043, "loss_bbox": 0.1252, "loss": 0.23332, "time": 0.25917}
{"mode": "train", "epoch": 1, "iter": 5500, "lr": 0.0025, "memory": 6220, "data_time": 0.00434, "loss_rpn_cls": 0.00623, "loss_rpn_bbox": 0.00976, "loss_cls": 0.08615, "acc": 97.01367, "loss_bbox": 0.11207, "loss": 0.2142, "time": 0.25842}
{"mode": "train", "epoch": 1, "iter": 5600, "lr": 0.0025, "memory": 6220, "data_time": 0.00417, "loss_rpn_cls": 0.00603, "loss_rpn_bbox": 0.00885, "loss_cls": 0.08496, "acc": 97.02148, "loss_bbox": 0.10999, "loss": 0.20984, "time": 0.25529}
{"mode": "train", "epoch": 1, "iter": 5700, "lr": 0.0025, "memory": 6220, "data_time": 0.00407, "loss_rpn_cls": 0.00525, "loss_rpn_bbox": 0.00808, "loss_cls": 0.07883, "acc": 97.33398, "loss_bbox": 0.10857, "loss": 0.20073, "time": 0.25691}
{"mode": "train", "epoch": 1, "iter": 5800, "lr": 0.0025, "memory": 6220, "data_time": 0.0043, "loss_rpn_cls": 0.00614, "loss_rpn_bbox": 0.01024, "loss_cls": 0.08873, "acc": 96.83301, "loss_bbox": 0.11516, "loss": 0.22027, "time": 0.2606}
{"mode": "train", "epoch": 1, "iter": 5900, "lr": 0.0025, "memory": 6220, "data_time": 0.00411, "loss_rpn_cls": 0.00658, "loss_rpn_bbox": 0.01, "loss_cls": 0.08343, "acc": 97.13867, "loss_bbox": 0.1116, "loss": 0.21162, "time": 0.25436}
{"mode": "train", "epoch": 1, "iter": 6000, "lr": 0.0025, "memory": 6220, "data_time": 0.00407, "loss_rpn_cls": 0.00392, "loss_rpn_bbox": 0.00828, "loss_cls": 0.07013, "acc": 97.60938, "loss_bbox": 0.0957, "loss": 0.17802, "time": 0.2542}
{"mode": "train", "epoch": 1, "iter": 6100, "lr": 0.0025, "memory": 6220, "data_time": 0.00417, "loss_rpn_cls": 0.00544, "loss_rpn_bbox": 0.00869, "loss_cls": 0.08947, "acc": 96.93457, "loss_bbox": 0.11259, "loss": 0.21619, "time": 0.2596}
{"mode": "train", "epoch": 1, "iter": 6200, "lr": 0.0025, "memory": 6220, "data_time": 0.00417, "loss_rpn_cls": 0.0049, "loss_rpn_bbox": 0.01078, "loss_cls": 0.08053, "acc": 97.05957, "loss_bbox": 0.12119, "loss": 0.21741, "time": 0.25544}
{"mode": "train", "epoch": 1, "iter": 6300, "lr": 0.0025, "memory": 6220, "data_time": 0.00417, "loss_rpn_cls": 0.00618, "loss_rpn_bbox": 0.01003, "loss_cls": 0.08697, "acc": 97.11621, "loss_bbox": 0.10953, "loss": 0.2127, "time": 0.25671}
{"mode": "train", "epoch": 1, "iter": 6400, "lr": 0.0025, "memory": 6220, "data_time": 0.00418, "loss_rpn_cls": 0.00561, "loss_rpn_bbox": 0.00992, "loss_cls": 0.07951, "acc": 97.18555, "loss_bbox": 0.11127, "loss": 0.20631, "time": 0.25427}
{"mode": "train", "epoch": 1, "iter": 6500, "lr": 0.0025, "memory": 6220, "data_time": 0.00424, "loss_rpn_cls": 0.00582, "loss_rpn_bbox": 0.01053, "loss_cls": 0.08833, "acc": 96.89648, "loss_bbox": 0.12377, "loss": 0.22845, "time": 0.25832}
{"mode": "train", "epoch": 1, "iter": 6600, "lr": 0.0025, "memory": 6220, "data_time": 0.00415, "loss_rpn_cls": 0.00517, "loss_rpn_bbox": 0.00849, "loss_cls": 0.07852, "acc": 97.13574, "loss_bbox": 0.10799, "loss": 0.20018, "time": 0.261}
{"mode": "train", "epoch": 1, "iter": 6700, "lr": 0.0025, "memory": 6220, "data_time": 0.00417, "loss_rpn_cls": 0.00499, "loss_rpn_bbox": 0.0089, "loss_cls": 0.08403, "acc": 96.88867, "loss_bbox": 0.11208, "loss": 0.20999, "time": 0.25969}
{"mode": "train", "epoch": 1, "iter": 6800, "lr": 0.0025, "memory": 6220, "data_time": 0.00413, "loss_rpn_cls": 0.00356, "loss_rpn_bbox": 0.00841, "loss_cls": 0.06936, "acc": 97.54395, "loss_bbox": 0.10484, "loss": 0.18617, "time": 0.2541}
{"mode": "train", "epoch": 1, "iter": 6900, "lr": 0.0025, "memory": 6220, "data_time": 0.00416, "loss_rpn_cls": 0.00434, "loss_rpn_bbox": 0.00883, "loss_cls": 0.06715, "acc": 97.57422, "loss_bbox": 0.10072, "loss": 0.18105, "time": 0.25536}
{"mode": "train", "epoch": 1, "iter": 7000, "lr": 0.0025, "memory": 6220, "data_time": 0.00415, "loss_rpn_cls": 0.00475, "loss_rpn_bbox": 0.00922, "loss_cls": 0.07836, "acc": 97.2832, "loss_bbox": 0.10757, "loss": 0.1999, "time": 0.25811}
{"mode": "train", "epoch": 1, "iter": 7100, "lr": 0.0025, "memory": 6220, "data_time": 0.00421, "loss_rpn_cls": 0.00625, "loss_rpn_bbox": 0.00906, "loss_cls": 0.08631, "acc": 97.0332, "loss_bbox": 0.10948, "loss": 0.2111, "time": 0.25237}
{"mode": "train", "epoch": 1, "iter": 7200, "lr": 0.0025, "memory": 6220, "data_time": 0.0042, "loss_rpn_cls": 0.00531, "loss_rpn_bbox": 0.00891, "loss_cls": 0.07915, "acc": 97.31543, "loss_bbox": 0.10357, "loss": 0.19694, "time": 0.25682}
{"mode": "train", "epoch": 1, "iter": 7300, "lr": 0.0025, "memory": 6220, "data_time": 0.0042, "loss_rpn_cls": 0.00582, "loss_rpn_bbox": 0.00908, "loss_cls": 0.07822, "acc": 97.19629, "loss_bbox": 0.10619, "loss": 0.19931, "time": 0.25517}
{"mode": "train", "epoch": 1, "iter": 7400, "lr": 0.0025, "memory": 6220, "data_time": 0.00431, "loss_rpn_cls": 0.00383, "loss_rpn_bbox": 0.01018, "loss_cls": 0.07298, "acc": 97.28027, "loss_bbox": 0.11386, "loss": 0.20085, "time": 0.26075}
{"mode": "train", "epoch": 1, "iter": 7500, "lr": 0.0025, "memory": 6220, "data_time": 0.00446, "loss_rpn_cls": 0.00401, "loss_rpn_bbox": 0.00761, "loss_cls": 0.07464, "acc": 97.26953, "loss_bbox": 0.09809, "loss": 0.18434, "time": 0.25908}
{"mode": "train", "epoch": 1, "iter": 7600, "lr": 0.0025, "memory": 6220, "data_time": 0.00422, "loss_rpn_cls": 0.00659, "loss_rpn_bbox": 0.0111, "loss_cls": 0.0995, "acc": 96.67578, "loss_bbox": 0.12228, "loss": 0.23946, "time": 0.25778}
{"mode": "train", "epoch": 1, "iter": 7700, "lr": 0.0025, "memory": 6220, "data_time": 0.00414, "loss_rpn_cls": 0.00572, "loss_rpn_bbox": 0.00975, "loss_cls": 0.09053, "acc": 96.87891, "loss_bbox": 0.10839, "loss": 0.21439, "time": 0.25557}
{"mode": "train", "epoch": 1, "iter": 7800, "lr": 0.0025, "memory": 6220, "data_time": 0.00414, "loss_rpn_cls": 0.00483, "loss_rpn_bbox": 0.01113, "loss_cls": 0.08767, "acc": 96.74414, "loss_bbox": 0.12281, "loss": 0.22645, "time": 0.2563}
{"mode": "train", "epoch": 1, "iter": 7900, "lr": 0.0025, "memory": 6220, "data_time": 0.00427, "loss_rpn_cls": 0.00553, "loss_rpn_bbox": 0.01078, "loss_cls": 0.08837, "acc": 96.81641, "loss_bbox": 0.12128, "loss": 0.22596, "time": 0.25691}
{"mode": "train", "epoch": 1, "iter": 8000, "lr": 0.0025, "memory": 6220, "data_time": 0.00421, "loss_rpn_cls": 0.00413, "loss_rpn_bbox": 0.00967, "loss_cls": 0.07783, "acc": 97.09766, "loss_bbox": 0.10841, "loss": 0.20003, "time": 0.25518}
{"mode": "train", "epoch": 1, "iter": 8100, "lr": 0.0025, "memory": 6220, "data_time": 0.00419, "loss_rpn_cls": 0.00497, "loss_rpn_bbox": 0.00921, "loss_cls": 0.07213, "acc": 97.39551, "loss_bbox": 0.10636, "loss": 0.19266, "time": 0.26017}
{"mode": "train", "epoch": 1, "iter": 8200, "lr": 0.0025, "memory": 6220, "data_time": 0.00416, "loss_rpn_cls": 0.00462, "loss_rpn_bbox": 0.01013, "loss_cls": 0.07898, "acc": 97.27148, "loss_bbox": 0.11617, "loss": 0.20989, "time": 0.25229}
{"mode": "train", "epoch": 1, "iter": 8300, "lr": 0.0025, "memory": 6220, "data_time": 0.00422, "loss_rpn_cls": 0.00418, "loss_rpn_bbox": 0.00981, "loss_cls": 0.08237, "acc": 96.97754, "loss_bbox": 0.11629, "loss": 0.21265, "time": 0.2583}
{"mode": "train", "epoch": 1, "iter": 8400, "lr": 0.0025, "memory": 6220, "data_time": 0.00421, "loss_rpn_cls": 0.0044, "loss_rpn_bbox": 0.00859, "loss_cls": 0.07304, "acc": 97.45996, "loss_bbox": 0.09976, "loss": 0.1858, "time": 0.26039}
{"mode": "train", "epoch": 1, "iter": 8500, "lr": 0.0025, "memory": 6220, "data_time": 0.00422, "loss_rpn_cls": 0.0046, "loss_rpn_bbox": 0.01028, "loss_cls": 0.08101, "acc": 96.98828, "loss_bbox": 0.11459, "loss": 0.21049, "time": 0.26056}
{"mode": "val", "epoch": 1, "iter": 5823, "lr": 0.0025, "mAP": 0.81459, "AP50": 0.815}
